plugins {
    id 'com.adarshr.test-logger' version '3.1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.mikepenz.aboutlibraries.plugin'
apply plugin: 'pt.jcosta.resourceplaceholders'

def supportedLocales = "en,de,fr,nb-rNO,nl,pt,ro"

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "net.vonforst.evmap"
        minSdkVersion 21
        targetSdkVersion 33
        // NOTE: always increase versionCode by 2 since automotive flavor uses versionCode + 1
        versionCode 172
        versionName "1.5.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs supportedLocales.split(',')
        buildConfigField("String", "supportedLocales", '"' + supportedLocales + '"')
    }

    signingConfigs {
        release {
            def isRunningOnCI = System.getenv("CI") == "true"
            if (isRunningOnCI) {
                // configure keystore
                storeFile = file("../_ci/keystore.jks")
                storePassword = System.getenv("KEYSTORE_PASSWORD")
                keyAlias = System.getenv("KEYSTORE_ALIAS")
                keyPassword = System.getenv("KEYSTORE_ALIAS_PASSWORD")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
    }

    flavorDimensions "dependencies", "automotive"
    productFlavors {
        foss {
            dimension "dependencies"
        }
        google {
            dimension "dependencies"
            versionNameSuffix "-google"
        }
        normal {
            dimension "automotive"
        }
        automotive {
            dimension "automotive"
            versionNameSuffix "-automotive"
            versionCode defaultConfig.versionCode + 1
            minSdkVersion 29
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        // Android Automotive OS app is always based on Google variant
        if (names.contains("automotive") && !names.contains("google")) {
            setIgnore(true)
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        targetCompatibility = JavaVersion.VERSION_1_8
        sourceCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KaptGenerateStubs).configureEach {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    buildFeatures {
        dataBinding = true
        viewBinding true
    }
    lint {
        disable 'NullSafeMutableLiveData'
        warning 'MissingTranslation'
    }

    testOptions {
        unitTests.includeAndroidResources true
    }

    resourcePlaceholders {
        files = ['xml/shortcuts.xml']
    }
    namespace 'net.vonforst.evmap'

    // add API keys from environment variable if not set in apikeys.xml
    applicationVariants.all { variant ->
        ext.env = System.getenv()
        def goingelectricKey = env.GOINGELECTRIC_API_KEY ?: project.findProperty("GOINGELECTRIC_API_KEY")
        if (goingelectricKey != null) {
            variant.resValue "string", "goingelectric_key", goingelectricKey
        }
        def openchargemapKey = env.OPENCHARGEMAP_API_KEY ?: project.findProperty("OPENCHARGEMAP_API_KEY")
        if (openchargemapKey == null && project.hasProperty("OPENCHARGEMAP_API_KEY_ENCRYPTED")) {
            openchargemapKey = decode(project.findProperty("OPENCHARGEMAP_API_KEY_ENCRYPTED"), "FmK.d,-f*p+rD+WK!eds")
        }
        if (openchargemapKey != null) {
            variant.resValue "string", "openchargemap_key", openchargemapKey
        }
        def googleMapsKey = env.GOOGLE_MAPS_API_KEY ?: project.findProperty("GOOGLE_MAPS_API_KEY")
        if (googleMapsKey != null && variant.flavorName.startsWith('google')) {
            variant.resValue "string", "google_maps_key", googleMapsKey
        }
        def mapboxKey = env.MAPBOX_API_KEY ?: project.findProperty("MAPBOX_API_KEY")
        if (mapboxKey == null && project.hasProperty("MAPBOX_API_KEY_ENCRYPTED")) {
            mapboxKey = decode(project.findProperty("MAPBOX_API_KEY_ENCRYPTED"), "FmK.d,-f*p+rD+WK!eds")
        }
        if (mapboxKey != null) {
            variant.resValue "string", "mapbox_key", mapboxKey
        }
        def chargepriceKey = env.CHARGEPRICE_API_KEY ?: project.findProperty("CHARGEPRICE_API_KEY")
        if (chargepriceKey == null && project.hasProperty("CHARGEPRICE_API_KEY_ENCRYPTED")) {
            chargepriceKey = decode(project.findProperty("CHARGEPRICE_API_KEY_ENCRYPTED"), "FmK.d,-f*p+rD+WK!eds")
        }
        if (chargepriceKey != null) {
            variant.resValue "string", "chargeprice_key", chargepriceKey
        }
        def fronyxKey = env.FRONYX_API_KEY ?: project.findProperty("FRONYX_API_KEY")
        if (fronyxKey == null && project.hasProperty("FRONYX_API_KEY_ENCRYPTED")) {
            fronyxKey = decode(project.findProperty("FRONYX_API_KEY_ENCRYPTED"), "FmK.d,-f*p+rD+WK!eds")
        }
        if (fronyxKey != null) {
            variant.resValue "string", "fronyx_key", fronyxKey
        }
    }

    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    }
}

configurations {
    googleNormalImplementation {}
    googleAutomotiveImplementation {}
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.core:core-splashscreen:1.0.1'
    implementation "androidx.activity:activity-ktx:1.7.2"
    implementation "androidx.fragment:fragment-ktx:1.5.7"
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    implementation 'androidx.browser:browser:1.5.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'
    implementation "androidx.work:work-runtime-ktx:2.7.1"
    implementation 'com.github.ev-map:CustomBottomSheetBehavior:e48f73ea7b'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:4.11.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.15.0'
    implementation 'com.squareup.moshi:moshi-adapters:1.15.0'
    implementation 'com.markomilos.jsonapi:jsonapi-retrofit:1.1.0'
    implementation 'io.coil-kt:coil:1.1.0'
    implementation 'com.github.ev-map:StfalconImageViewer:5082ebd392'
    implementation "com.mikepenz:aboutlibraries-core:$about_libs_version"
    implementation "com.mikepenz:aboutlibraries:$about_libs_version"
    implementation 'com.airbnb.android:lottie:4.1.0'
    implementation 'io.michaelrocks.bimap:bimap:1.1.0'
    implementation 'com.google.guava:guava:29.0-android'
    implementation 'com.github.pengrad:mapscaleview:1.6.0'
    implementation 'com.github.romandanylyk:PageIndicatorView:b1bad589b5'

    // Android Auto
    def carAppVersion = '1.3.0-rc01'
    googleImplementation "androidx.car.app:app:$carAppVersion"
    googleNormalImplementation "androidx.car.app:app-projected:$carAppVersion"
    googleAutomotiveImplementation "androidx.car.app:app-automotive:$carAppVersion"

    // AnyMaps
    def anyMapsVersion = '8f1226e1c5'
    implementation "com.github.ev-map.AnyMaps:anymaps-base:$anyMapsVersion"
    googleImplementation "com.github.ev-map.AnyMaps:anymaps-google:$anyMapsVersion"
    googleImplementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation("com.github.ev-map.AnyMaps:anymaps-mapbox:$anyMapsVersion") {
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-accounts'
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-telemetry'
        exclude group: 'com.google.android.gms', module: 'play-services-location'
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-core'
    }
    // original version of mapbox-android-core
    googleImplementation 'com.mapbox.mapboxsdk:mapbox-android-core:2.0.1'
    // patched version that removes build-time dependency on GMS (-> no Google location services)
    fossImplementation 'com.github.ev-map:mapbox-events-android:a21c324501'

    // Google Places
    googleImplementation 'com.google.android.libraries.places:places:3.1.0'
    googleImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.4'

    // Mapbox Geocoding
    implementation 'com.mapbox.mapboxsdk:mapbox-sdk-services:5.5.0'

    // navigation library
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // viewmodel library
    def lifecycle_version = "2.6.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // room library
    def room_version = "2.5.1"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation('com.github.anboralabs:spatia-room:0.2.6') {
        exclude group: 'com.github.dalgarins', module: 'android-spatialite'
    }
    implementation 'com.github.ev-map:android-spatialite:654dca2365'

    // billing library
    def billing_version = "6.0.0"
    googleImplementation "com.android.billingclient:billing:$billing_version"
    googleImplementation "com.android.billingclient:billing-ktx:$billing_version"

    // ACRA (crash reporting)
    def acraVersion = "5.8.4"
    implementation("ch.acra:acra-mail:$acraVersion")
    implementation("ch.acra:acra-dialog:$acraVersion")
    implementation("ch.acra:acra-limiter:$acraVersion")

    // debug tools
    debugImplementation 'com.facebook.flipper:flipper:0.190.0'
    debugImplementation 'com.facebook.soloader:soloader:0.10.5'
    debugImplementation 'com.facebook.flipper:flipper-network-plugin:0.190.0'

    // testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation "com.squareup.okhttp3:mockwebserver:4.11.0"
    //noinspection GradleDependency
    testImplementation 'org.json:json:20080701'
    testImplementation 'org.robolectric:robolectric:4.9'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'

    // testing for car app
    testGoogleImplementation "androidx.car.app:app-testing:$carAppVersion"
    testGoogleImplementation 'org.robolectric:robolectric:4.9.2'
    testGoogleImplementation 'androidx.test:core:1.5.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.arch.core:core-testing:2.2.0'

    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.15.0"

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
}

private static String decode(String s, String key) {
    return new String(xorWithKey(s.decodeBase64(), key.getBytes()), "UTF-8");
}

private static byte[] xorWithKey(byte[] a, byte[] key) {
    byte[] out = new byte[a.length];
    for (int i = 0; i < a.length; i++) {
        out[i] = (byte) (a[i] ^ key[i%key.length]);
    }
    return out;
}
